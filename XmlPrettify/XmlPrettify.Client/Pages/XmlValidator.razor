@page "/"
@using System.Xml
@using System.Xml.Linq
@using static System.Xml.Formatting
@using Radzen.Blazor
@using System.Text
@using System.Text.Json
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject Radzen.NotificationService NotificationService

<section>
    <h1 style="font-size:x-large; font-weight:bold; color: #004085;">XML Formatter and Validator</h1>
    <p style="color: #004085">Use this tool to validate and format your XML files easily. Simply paste your XML content or upload a file, select formatting options, and view the results instantly.</p>
    <hr style="border: none; border-top: 1px solid #111; margin: 1rem 0;" />

    <RadzenTemplateForm TItem="object">
        <div style="margin-bottom: 1rem;">
            <RadzenLabel Text="Input XML" />
            <RadzenTextArea ValueChanged="ValueChangedHandler" Value=@InputXml Rows="10" Style="width: 100%;" Placeholder="Paste your XML here or select a file..." />
        </div>

        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
            <div style="width: 10%; text-align: left;">
                <label for="input" class="input-label">Select file</label>
                <InputFile id="input" class="sr-only" OnChange="HandleFileSelected" />
                <RadzenNotification @ref="notification" />
            </div>
            <div id="dragAndDropElement" style="border: 2px dashed #ccc; padding: 1rem; text-align: center; background-color: #f9f9f9; width: 90%;"
                 ondragover="event.preventDefault();"
                 ondrop="handleFileDrop(event)">
                @DRAG_AND_DROP_INSTRUCTION_DEFAULT
            </div>
        </div>

        <hr style="border: none; border-top: 1px solid #ccc; margin: 1rem 0;" />
        <div style="display: flex; align-items: center; margin-bottom: 1rem;">
            <RadzenCheckBox @bind-Value="EnableFormattingOptions" Style="margin-right: 0.5rem;" />
            <label>Format XML</label>
        </div>

        @if (EnableFormattingOptions)
        {
            <div style="display: flex; flex-wrap: wrap; gap: 1rem; margin-bottom: 1rem;">
                <div style="display: flex; align-items: center;">
                    <RadzenCheckBox @bind-Value="PrettyPrint" Style="margin-right: 0.5rem;" />
                    <label>Pretty Print</label>
                </div>
                <div style="display: flex; align-items: center;">
                    <RadzenCheckBox @bind-Value="OmitXmlDeclaration" Style="margin-right: 0.5rem;" />
                    <label>Omit XML Declaration</label>
                </div>
                <div style="display: flex; align-items: center;">
                    <RadzenCheckBox @bind-Value="NewLineOnAttributes" Style="margin-right: 0.5rem;" />
                    <label>New Line on Attributes</label>
                </div>
            </div>
        }
        <hr style="border: none; border-top: 1px solid #ccc; margin: 1rem 0;" />

        <div style="display: flex; align-items: center;">
            <RadzenButton Text="@(EnableFormattingOptions ? "Validate and Format" : "Validate")" Click="@FormatXml" Style="margin-right: 1rem;" />
            <div id="validationNotification" style="opacity: 0; transition: opacity 0.5s; font-size: 0.9rem; color: green; margin-top: 0.5rem;">Valid XML!</div>
        </div>
        <div style="margin-top: 1rem; display: flex; align-items: center; gap: 0.5rem;">
            <div style="flex-grow: 1;">
                <RadzenLabel Text="Output" />
                <RadzenTextArea @bind-Value="OutputXml" Rows="10" Disabled="true" Style="width: 100%; background-color: #f9f9f9; color: #000;" />
            </div>
            <RadzenButton Icon="content_copy" Tooltip="Copy to Clipboard" Click="CopyToClipboard" Style="padding: 0.5rem; font-size: 1rem;" />
        </div>
        <div id="copyNotification" style="opacity: 0; transition: opacity 0.5s; font-size: 0.9rem; color: green; margin-top: 0.5rem;">Copied to clipboard!</div>
    </RadzenTemplateForm>
</section>
@code {
    private bool isFileSelected = false;
    private IBrowserFile? selectedFile;
    private RadzenNotification? notification;

    private string InputXml { get; set; } = string.Empty;
    private string OutputXml { get; set; } = string.Empty;
    private bool EnableFormattingOptions { get; set; } = false;
    private bool PrettyPrint { get; set; } = true;
    private bool OmitXmlDeclaration { get; set; } = false;
    private bool NewLineOnAttributes { get; set; } = false;

    public const string DRAG_AND_DROP_INSTRUCTION_DEFAULT = "Drag and drop your XML file here";
    public const string DRAG_AND_DROP_INSTRUCTION_DRAGGED = "OK!";

    private DotNetObjectReference<XmlValidator>? objectReference;

    protected override void OnInitialized()
    {
        objectReference = DotNetObjectReference.Create(this);
    }

    public void Dispose()
    {
        objectReference?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("registerDotNetObject", objectReference);
        }
    }

    private void ValueChangedHandler(string newValue)
    {
        try
        {
            InputXml = newValue;
        }
        catch (Exception e)
        {
            ShowPopup($"Error: {e.Message}");
        }
    }

    private void FormatXml()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(InputXml))
            {
                OutputXml = "Input XML cannot be empty.";
                return;
            }

            var xmlDocument = new XmlDocument();

            try
            {
                xmlDocument.LoadXml(InputXml);
            }
            catch (Exception e)
            {
                ShowInfoNotification("Invalid XML!", error: true);
                OutputXml = $"XML Validation Error: {e.Message}";
                return;
            }

            ShowInfoNotification("Valid XML!", error: false);

            if (!EnableFormattingOptions)
            {
                OutputXml = InputXml;
                return;
            }

            var settings = new XmlWriterSettings
                {
                    Indent = PrettyPrint,
                    IndentChars = "  ",
                    NewLineOnAttributes = NewLineOnAttributes,
                    OmitXmlDeclaration = OmitXmlDeclaration,
                    Encoding = new System.Text.UTF8Encoding(false)
                };

            using (var stringWriter = new StringWriterWithEncoding(new System.Text.UTF8Encoding(false)))
            using (var xmlWriter = XmlWriter.Create(stringWriter, settings))
            {
                xmlDocument.Save(xmlWriter);
                OutputXml = stringWriter.ToString();
            }
        }
        catch (XmlException ex)
        {
            OutputXml = $"XML Validation Error: {ex.Message}";
        }
        catch (Exception ex)
        {
            OutputXml = $"Error: {ex.Message}";
        }
    }

    private async void CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", OutputXml);
        ShowCopyNotification();
    }

    private async void ShowCopyNotification()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('copyNotification').style.opacity = '1'; setTimeout(() => document.getElementById('copyNotification').style.opacity = '0', 1500);");
    }

    private async void ShowPopup(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }

    private async void ShowInfoNotification(string message, bool error)
    {
        if (error)
            await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('validationNotification').style.color = 'red'; document.getElementById('validationNotification').textContent = 'Invalid XML!'; document.getElementById('validationNotification').style.opacity = '1'; setTimeout(() => document.getElementById('validationNotification').style.opacity = '0', 2000); ");
        else
            await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('validationNotification').style.color = 'green'; document.getElementById('validationNotification').textContent = 'Valid XML!'; document.getElementById('validationNotification').style.opacity = '1'; setTimeout(() => document.getElementById('validationNotification').style.opacity = '0', 2000);");
    }

    public class StringWriterWithEncoding : StringWriter
    {
        private readonly Encoding _encoding;
        public StringWriterWithEncoding(Encoding encoding)
        {
            _encoding = encoding;
        }
        public override Encoding Encoding => _encoding;
    }

    [JSInvokable]
    public async Task HandleFileDrop(string fileContents)
    {
        try
        {
            InputXml = fileContents;
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('dragAndDropElement').textContent = '{DRAG_AND_DROP_INSTRUCTION_DRAGGED}'; setTimeout(() => document.getElementById('dragAndDropElement').textContent = '{DRAG_AND_DROP_INSTRUCTION_DEFAULT}', 2000);");
            StateHasChanged();

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to read file: {ex.Message}"
            });
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File is not null)
        {
            try
            {
                var fileContentStream = new StreamContent(e.File.OpenReadStream());
                var fileContents = await fileContentStream.ReadAsStringAsync();
                InputXml = fileContents;
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = $"Exception: {ex.Message}"
                    });
            }
        }
    }

    private class FileUpload
    {
        public Stream Stream { get; set; } = default!;
    }
}
